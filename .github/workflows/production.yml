name: Test And Buildon:pull_request:types:- closedbranches:- mainworkflow_dispatch:env:PJ_ACTOR: toposoidPJ_REPO: toposoid-knowledge-register-subscriberPJ_BRANCH: mainPJ_VERSION: 0.6jobs:unit-test_toposoid-knowledge-register-subscriber:runs-on: self-hostedsteps:- name: Clone ${{ env.PJ_REPO }}uses: actions/checkout@v3with:repository: ${{ env.PJ_ACTOR }}/${{ env.PJ_REPO }}- name: Execute testsrun: |cd ${GITHUB_WORKSPACE} && cd ../cd ./${{ env.PJ_REPO }}docker rm --force $(docker ps -a -q) > /dev/null 2>&1 && :docker rmi --force ${{ env.PJ_REPO }}:${{ env.PJ_VERSION }}> /dev/null 2>&1 && :docker rmi --force toposoid/${{ env.PJ_REPO }}:${{ env.PJ_VERSION }}> /dev/null 2>&1 && :docker rmi --force toposoid/toposoid-scala-lib:${{ env.PJ_VERSION }}> /dev/null 2>&1 && :docker imagesdocker system prune -fdocker volume prune -fdocker build --build-arg TARGET_BRANCH=${{ env.PJ_BRANCH }} --tag ${{ env.PJ_REPO }}:${{ env.PJ_VERSION }} -f Dockerfile-workflow --no-cache .sed -i s/__##YOUR_AWS_ACCESS_KEY##__/${{ secrets.AWS_CREDENTIAL_ACCESSKEY }}/g docker-compose-workflow.ymlsed -i s/__##YOUR_AWS_SECRET_KEY##__/${{ secrets.AWS_CREDINTIAL_SECRETKEY }}/g docker-compose-workflow.ymldocker compose -f docker-compose-workflow.yml up -d toposoid-knowledge-register-subscriberdocker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt headerCheck"docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt test:headerCheck"docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt compile"docker compose -f docker-compose-workflow.yml up -d mysqldocker compose -f docker-compose-workflow.yml up -d neo4jdocker compose -f docker-compose-workflow.yml up -d elasticmqdocker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt 'runMain com.ideal.linked.toposoid.mq.KnowledgeRegisterSubscriber' &"docker compose -f docker-compose-workflow.yml up -d sentence-weaviatedocker compose -f docker-compose-workflow.yml up -d data-accessor-sentence-weaviate-webdocker compose -f docker-compose-workflow.yml up -d image-weaviatedocker compose -f docker-compose-workflow.yml up -d data-accessor-image-weaviate-webdocker compose -f docker-compose-workflow.yml up -d toposoid-contents-admin-webdocker compose -f docker-compose-workflow.yml up -d toposoid-common-image-recognition-webdocker compose -f docker-compose-workflow.yml up -d toposoid-common-nlp-japanese-webdocker compose -f docker-compose-workflow.yml up -d toposoid-common-nlp-english-web #Required for NO_REFERENCE embeddingdocker compose -f docker-compose-workflow.yml up -d toposoid-sentence-parser-japanese-webdocker compose -f docker-compose-workflow.yml up -d data-accessor-neo4j-webdocker compose -f docker-compose-workflow.yml up -d data-accessor-mysql-webcurl --retry 15 --retry-delay 5 --retry-all-errors -X POST http://localhost:7474curl --retry 15 --retry-delay 5 --retry-all-errors -X POST -H "Content-Type: application/json" -H "X_TOPOSOID_TRANSVERSAL_STATE: {'userId':'test-user', 'username':'guest', 'roleId':0, 'csrfToken':''}" -d '{"sentence": "これはテストです。"}' http://localhost:9006/getFeatureVectorcurl --retry 15 --retry-delay 5 --retry-all-errors -X POST -H "Content-Type: application/json" -H "X_TOPOSOID_TRANSVERSAL_STATE: {'userId':'test-user', 'username':'guest', 'roleId':0, 'csrfToken':''}" -d '{"sentence": "This is a test"}' http://localhost:9008/getFeatureVectorecho 'quit' | curl -s -o /dev/null telnet://localhost:3306docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt 'testOnly **.*JapaneseTest'"docker compose -f docker-compose-workflow.yml rm -fsv toposoid-common-nlp-japanese-webdocker compose -f docker-compose-workflow.yml rm -fsv toposoid-sentence-parser-japanese-webdocker compose -f docker-compose-workflow.yml up -d corenlpdocker compose -f docker-compose-workflow.yml up -d toposoid-sentence-parser-english-webcurl --retry 15 --retry-delay 5 --retry-all-errors -X POST  -d 'Life is beautiful.' http://localhost:9000docker compose -f docker-compose-workflow.yml exec -T ${{ env.PJ_REPO }} bash -c "cd ${{ env.PJ_REPO }} && sbt 'testOnly **.*EnglishTest'"docker rm --force $(docker ps -a -q) > /dev/null 2>&1 && :docker rmi --force ${{ env.PJ_REPO }}:${{ env.PJ_VERSION }}> /dev/null 2>&1 && :- name: Docker metaid: docker_metauses: crazy-max/ghaction-docker-meta@v3with:images: toposoid/${{ env.PJ_REPO }}:${{ env.PJ_VERSION }}- name: Login to CRuses: docker/login-action@v2with:username: toposoidpassword: ${{ secrets.CR_TOKEN }}- name: Build And Push Docker Image For Testuses: docker/build-push-action@v3with:context: .file: Dockerfilepush: truetags: toposoid/${{ env.PJ_REPO }}:${{ env.PJ_VERSION }}build-args: |TARGET_BRANCH=${{ env.PJ_BRANCH }}